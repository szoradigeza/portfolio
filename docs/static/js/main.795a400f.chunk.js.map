{"version":3,"sources":["components/introduction/introduction.tsx","components/about/about.tsx","components/navigation-bar/navigation-bar.tsx","components/projects/projects.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Introduction","props","className","id","onClick","aria-hidden","Component","About","NavigationBar","activeItem","this","activeMenuItem","handleScrollToSection","Projects","App","section1","createRef","section2","section3","dumyForSecondSection","wrapperRef","handleClick","current","scrollIntoView","behavior","handleScroll","event","scrollPos","window","pageYOffset","section2Offset","offsetTop","section3Offset","second","third","setState","sectionNum","state","scrollPosition","scrollTop","addEventListener","ref","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.795a400f.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport \"./introduction.scss\";\r\n\r\ninterface Props {\r\n    scrollPosition?: any;\r\n    onClick : Function\r\n}\r\nexport class Introduction extends Component<Props>{\r\n    constructor(props: Props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"introduction-container\" id=\"intro-container\">\r\n                <div className=\"introduction-text\">\r\n                    <p>Hello,<br></br> My name is <span>Géza Szórádi</span>. <br></br> I'm a full-stack web developer. </p>\r\n                </div>\r\n                <div className=\"btn-container\">\r\n                <button className=\"about-me\" onClick={()=> this.props.onClick()}>\r\n                    <span className=\"circle\" aria-hidden=\"true\">\r\n                        <span className=\"icon arrow\"></span>\r\n                        </span>\r\n                    <span className=\"button-text\">More about me</span>\r\n                    </button>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport \"./about.css\";\r\nexport class About extends Component{\r\n    \r\n/* */\r\n\r\n\r\n    render(){  \r\n            return(\r\n                <div className=\"about\">\r\n                    <div className=\"tags\">\r\n                        <code>HTML</code><br></br>\r\n                        <code className=\"body-tag\">body</code><br></br>\r\n                        <code className=\"div-tag\">div</code>\r\n                    </div>\r\n                    <div className=\"about-container\">\r\n                        <a>I'm a 24 years old enthusiastic <span className=\"developer-txt\">developer </span> who live in Veszprém.<br></br>\r\n                                I studied computer Science in University of Pannonia.<br></br>\r\n                                I am working currently in <span className=\"continental-txt\">Continental corporation </span>.\r\n                                Next to the Continental's project works I do home made projects and<br></br> I love learning new things.\r\n                                I like building new stuff and working with other people<br></br> – nothing really interesting is ever built alone!<br></br>\r\n                                My main interests are:<br></br>\r\n                                <ul>\r\n                                    <li>Angular</li>\r\n                                    <li>React</li>\r\n                                    <li>NodeJS</li>\r\n                                    <li>Python</li>\r\n                                    <li>Java</li>\r\n                                    <li>Software architecture</li>\r\n                                    <li>Reactive Programming</li>\r\n                                    <li>Learning new programming languages</li>\r\n                                </ul>\r\n                                Beside the programming I am interested in sports. I go to the gym 3-4 times a week.<br></br>\r\n                        </a>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"end-tags\">\r\n                    <code className=\"div-tag\">/div</code><br></br>\r\n                    <code className=\"body-tag\">/body</code> <br></br>\r\n                        <code>/HTML</code><br></br>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                )\r\n}\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nimport \"./navigation-bar.css\";\r\ninterface Props {\r\n    handleScrollToSection : Function;\r\n    activeMenuItem: number;\r\n}\r\nexport class NavigationBar extends Component<Props>{\r\n    constructor(props: Props){\r\n        super(props)}\r\n\r\n    \r\n    render(){  \r\n        const activeItem = this.props.activeMenuItem\r\n            return(\r\n        <nav className=\"nav\">\r\n            <ul className=\"ul\">\r\n            <li className={activeItem === 1 ? \"li-active\" : ''} \r\n                onClick={() =>  this.props.handleScrollToSection(1)}>\r\n                <span>Introduction</span>\r\n            </li>\r\n            <li className={activeItem === 2 ? \"li-active\" : ''}  \r\n                onClick={() =>  this.props.handleScrollToSection(2)}>\r\n                <span>About</span></li>\r\n            <li className={activeItem === 3 ? \"li-active\" : ''}  \r\n                onClick={() =>  this.props.handleScrollToSection(3)}>\r\n                <span>Projects</span></li>\r\n            </ul>\r\n         </nav>\r\n                )\r\n    }\r\n}","import { Component } from \"react\";\r\nimport React from \"react\";\r\nexport class Projects extends Component{\r\n    \r\n    render(){  \r\n            return(\r\n                <div className=\"about\">\r\n                    <label>Projects</label>\r\n                </div>\r\n                )\r\n}\r\n}","import React, { createRef, Component } from 'react';\nimport './App.css';\nimport { Introduction } from '../introduction/introduction';\nimport { About } from '../about/about';\nimport { NavigationBar } from '../navigation-bar/navigation-bar';\nimport { Projects } from '../projects/projects';\n\ninterface State{\n  scrollPosition?: number;\n  activeMenuItem?: number\n}\ninterface Props{\n}\n\nclass App extends Component<Props, State>{\n  constructor(props: Props){\n      super(props);\n      this.state = {\n        scrollPosition: this.wrapperRef.current?.scrollTop,\n        activeMenuItem: 1\n    }\n  }\n  section1 =  createRef<HTMLDivElement>();\n  section2 =  createRef<HTMLDivElement>();\n  section3 =  createRef<HTMLDivElement>();\n  dumyForSecondSection = createRef<HTMLDivElement>();\n  wrapperRef=createRef<HTMLDivElement>();\n  handleClick = () => {\n    this.dumyForSecondSection.current?.scrollIntoView({ behavior: 'smooth' });\n  }\ncomponentDidMount(){\n  window.addEventListener(\"scroll\", this.handleScroll)\n}\nhandleScroll = (event: any) => {\n  const scrollPos = window.pageYOffset;\n  const section2Offset = this.section2.current?.offsetTop! - 41;\n  const section3Offset = this.section3.current?.offsetTop! - 41;\n  const first = scrollPos! < (section2Offset-150);\n  const second = scrollPos! > section2Offset && scrollPos! < section3Offset;\n  const third = scrollPos! > section3Offset;\n  if(first){\n    this.setState({activeMenuItem: 1});\n  } else if(second){\n    this.setState({activeMenuItem: 2});\n  } else if(third){\n    this.setState({activeMenuItem: 3})\n  }\n  }\nhandleScrollToSection = (sectionNum: number) => {\n  switch (sectionNum) {\n    case 1:\n      this.section1.current?.scrollIntoView({ behavior: 'smooth' });\n      break;\n      case 2:\n        this.dumyForSecondSection.current?.scrollIntoView({ behavior: 'smooth' });\n        break;\n      case 3:\n        this.section3.current?.scrollIntoView({ behavior: 'smooth' });\n        break;\n    default:\n      break;\n  }\n}\n  \n  render()\n  //solve overflow problem\n  {\n  return (\n    <div className=\"App\">\n  <section className=\"section parallax bg1\" id=\"section1\" ref={this.section1}>\n  <Introduction scrollPosition={this.state.scrollPosition}\n    onClick={() => this.handleClick() }\n    />\n  </section>\n  <div>\n  <div ref={this.dumyForSecondSection}></div>\n    <NavigationBar handleScrollToSection={this.handleScrollToSection} activeMenuItem={this.state.activeMenuItem!}/>\n  <section className=\"section static\" ref={this.section2} id=\"sec2\">\n    <About />\n  </section>\n  <section className=\"section parallax bg2\" ref={this.section3}>\n    <Projects />\n  </section>\n</div>\n</div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}